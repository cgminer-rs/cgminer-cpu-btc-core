[package]
name = "cgminer-cpu-btc-core"
version = "0.2.0"
edition = "2021"
authors = ["CGMiner Rust Team"]
description = "Optimized CPU Bitcoin mining core for CGMiner-RS - provides SIMD-accelerated CPU mining with intelligent thermal and power management"
license = "GPL-3.0"
repository = "https://github.com/your-org/cgminer-rs"
keywords = ["bitcoin", "mining", "cpu", "simd", "sha256"]
categories = ["hardware-support", "algorithms"]

[dependencies]
# Core library
cgminer-core = { path = "../cgminer-core" }

# Async runtime
tokio = { version = "1.40", features = ["full"] }
futures = "0.3"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Utilities
uuid = { version = "1.0", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
hex = "0.4"
sha2 = "0.10"
  async-trait = "0.1"
  fastrand = "2.1"
  libc = "0.2"
  crossbeam = { version = "0.8", optional = true }

# CPU affinity and system info
core_affinity = { version = "0.8", optional = true }
num_cpus = "1.16"
sysinfo = "0.30"

# SIMD and performance
rayon = "1.8"

# Logging
tracing = "0.1"

# Optional features for advanced optimizations
[dependencies.raw-cpuid]
version = "11.0"
optional = true

# 添加硬件加速所需的依赖
# crossbeam已在上面定义

[dependencies.lazy_static]
version = "1.4"

[dependencies.num-bigint]
version = "0.4"
optional = true

[dependencies.num-traits]
version = "0.2"
optional = true

[dependencies.pprof]
version = "0.13"
optional = true

[dependencies.mimalloc]
version = "0.1"
optional = true

[dependencies.tokio-util]
version = "0.7"

[features]
default = ["simd-optimizations", "thermal-management", "power-management", "cpu-affinity", "temperature-monitoring", "hardware-acceleration", "crossbeam"]

# SIMD优化 - 启用向量化指令
simd-optimizations = []

# 热管理 - 监控CPU温度和频率
thermal-management = []

# 温度监控 - 启用真实温度读取功能
temperature-monitoring = []

# 电源管理 - 监控和控制功耗
power-management = []

# CPU绑定 - 将挖矿线程绑定到特定CPU核心
cpu-affinity = ["core_affinity"]

# 高级CPU检测 - 详细的CPU特性检测
advanced-cpu-detection = ["raw-cpuid"]

# 硬件加速 - 启用SHA256硬件加速
hardware-acceleration = ["raw-cpuid", "crossbeam"]

# 调试日志 - 详细的挖矿过程日志
debug-logging = []

# 性能分析 - 启用性能监控和分析
profiling = ["pprof"]

# 高级数学优化 - 使用优化的数学库
advanced-math = ["num-bigint", "num-traits"]

# 内存优化 - 优化内存分配和使用
memory-optimized = ["mimalloc"]

# 网络优化 - 优化网络通信
network-optimized = ["tokio/net"]

# 实验性优化 - 实验性的性能优化
experimental = ["simd-optimizations", "advanced-math", "memory-optimized", "advanced-cpu-detection"]

[dev-dependencies]
tokio-test = "0.4"
mockall = "0.12"
tracing-subscriber = "0.3"
criterion = { version = "0.5", features = ["html_reports"] }
rand = "0.8"
futures = "0.3"

[lib]
name = "cgminer_cpu_btc_core"
crate-type = ["rlib"]  # 只生成rlib，避免LTO冲突

# 如果需要动态库，可以单独构建
# crate-type = ["cdylib", "rlib"]

# CPU挖矿专用优化配置
[profile.release]
# 最高优化级别 - CPU挖矿需要极致性能
opt-level = 3
# 链接时优化 - 提高CPU算法性能
lto = "fat"
# 单个代码生成单元 - 最大化内联优化
codegen-units = 1
# 崩溃时直接终止 - 减少开销
panic = "abort"
# 启用调试信息用于性能分析
debug = 1
# 去除未使用的代码
strip = "symbols"
# 禁用溢出检查 - CPU挖矿需要最大性能
overflow-checks = false
# 静态编译
rpath = false

# 开发版本配置 - 保持合理的编译速度
[profile.dev]
opt-level = 2  # 开发时也需要一定优化
debug = true
overflow-checks = true
incremental = true

# 性能测试配置 - CPU挖矿基准测试
[profile.bench]
inherits = "release"
debug = true
lto = "thin"  # 基准测试使用thin LTO平衡编译时间

# 测试配置
[profile.test]
opt-level = 2  # 测试时也需要优化
debug = true
overflow-checks = true

# CPU挖矿专用依赖包优化说明
# 以下配置针对关键库进行特殊优化

# CPU挖矿专用依赖包优化
# 针对关键库进行特殊优化配置

# SHA-256 哈希库优化
[profile.release.package.sha2]
opt-level = 3
codegen-units = 1

[profile.dev.package.sha2]
opt-level = 3
codegen-units = 1

# 并行计算库优化
[profile.release.package.rayon]
opt-level = 3
codegen-units = 1

[profile.dev.package.rayon]
opt-level = 3
codegen-units = 1

# CPU绑定库优化
[profile.release.package.core_affinity]
opt-level = 3
codegen-units = 1

[profile.dev.package.core_affinity]
opt-level = 3
codegen-units = 1

# 数学运算库优化
[profile.release.package.num-bigint]
opt-level = 3
codegen-units = 1

[profile.dev.package.num-bigint]
opt-level = 3
codegen-units = 1

# 序列化库优化
[profile.release.package.serde]
opt-level = 3
codegen-units = 1

[profile.dev.package.serde]
opt-level = 2
codegen-units = 1

# 异步运行时优化
[profile.release.package.tokio]
opt-level = 3
codegen-units = 1

[profile.dev.package.tokio]
opt-level = 2
codegen-units = 1

# 内存分配器优化
[profile.release.package.mimalloc]
opt-level = 3
codegen-units = 1

[profile.dev.package.mimalloc]
opt-level = 3
codegen-units = 1

# 时间库优化
[profile.release.package.chrono]
opt-level = 3
codegen-units = 1

[profile.dev.package.chrono]
opt-level = 2
codegen-units = 1

# 日志库优化
[profile.release.package.tracing]
opt-level = 2
codegen-units = 1

[profile.dev.package.tracing]
opt-level = 1
codegen-units = 1

# 示例程序
[[example]]
name = "basic_mining_demo"
path = "examples/basic_mining_demo.rs"

[[example]]
name = "multi_device_demo"
path = "examples/multi_device_demo.rs"

[[example]]
name = "performance_monitoring_demo"
path = "examples/performance_monitoring_demo.rs"

[[example]]
name = "temperature_demo"
path = "examples/temperature_demo.rs"

[[example]]
name = "cpu_affinity_demo"
path = "examples/cpu_affinity_demo.rs"

[[example]]
name = "real_mining_simulation"
path = "examples/real_mining_simulation.rs"

[[example]]
name = "benchmark_demo"
path = "examples/benchmark_demo.rs"

# 基准测试
[[bench]]
name = "cpu_btc_core_benchmark"
harness = false

[[bench]]
name = "stats_reporting_benchmark"
harness = false
